"""
    --- AUTO-GENERATED DOCSTRING ---
    Table of content is automatically generated by Agent Docstrings v1.3.5
    
    Classes/Functions:
        - get_marker_settings() -> Dict[str, Tuple[str, str]] (line 30)
        - marker_settings_ui() -> None (line 38)
        - reset_marker_settings(refs) (line 106)
        - create_cross_section_plot(df: pd.DataFrame, markers_dict: Optional[Dict[str, Tuple[str, str]]] = None, normalization_wavelength: float = 1300, depth: float = None, wavelength_range: Tuple[float, float] = None, absorption_threshold: float = 50) -> go.Figure (line 123)
    --- END AUTO-GENERATED DOCSTRING ---

Module for creating cross-section plots.
"""
import logging
from typing import Dict, Optional, Tuple

import numpy as np
import pandas as pd
import plotly.graph_objects as go
import streamlit as st

from ..components.laser_manager import overlay_lasers
from ..config.plot_config import (
    DARK_THEME,
    FLOATING_ELEMENT_THEME,
    LIGHT_THEME,
    CrossSectionPlotConfig,
    get_common_colorbar_config,
)
from ..config.tissue_config import DEFAULT_TISSUE_PARAMS
from ..plots.tissue_view import calculate_tissue_parameters

logger = logging.getLogger(__name__)


def get_marker_settings() -> Dict[str, Tuple[str, str]]:
    """Get marker settings from session state or initialize defaults."""
    if "marker_settings" not in st.session_state:
        config = CrossSectionPlotConfig()
        st.session_state.marker_settings = config.default_marker_styles
    return st.session_state.marker_settings


def marker_settings_ui() -> None:
    """Render UI for customizing marker settings."""
    if not st.session_state.get("marker_settings"):
        return

    # Create two columns for the entire interface
    main_col, preview_col = st.columns([3, 1])

    with main_col:
        # Define marker options
        marker_options = {
            "● Circle": "circle",
            "■ Square": "square",
            "◆ Diamond": "diamond",
            "▲ Triangle": "triangle-up",
            "▼ Down Triangle": "triangle-down",
            "★ Star": "star",
            "⬡ Hexagon": "hexagon",
        }
        marker_list = list(marker_options.keys())

        # Create a row for each reference
        for ref in st.session_state.marker_settings.keys():
            col1, col2, col3 = st.columns([2, 2, 1])

            with col1:
                current_marker = st.session_state.marker_settings[ref][0]
                marker_idx = list(marker_options.values()).index(current_marker)
                marker = st.selectbox(
                    ref,
                    options=marker_list,
                    index=marker_idx,
                    key=f"marker_{ref}",
                    label_visibility="collapsed"
                )
                st.session_state.marker_settings[ref] = (
                    marker_options[marker],
                    st.session_state.marker_settings[ref][1],
                )

            with col2:
                st.markdown(f"<small style='font-size: 0.8em; color: #666;'>{ref}</small>", unsafe_allow_html=True)

            with col3:
                color = st.color_picker(
                    "Color",
                    value=st.session_state.marker_settings[ref][1],
                    key=f"color_{ref}",
                    label_visibility="collapsed"
                )
                st.session_state.marker_settings[ref] = (
                    st.session_state.marker_settings[ref][0],
                    color,
                )

    with preview_col:
        st.button("Reset to Defaults", use_container_width=True,
                  on_click=lambda: reset_marker_settings(st.session_state.marker_settings.keys()))

        # Show compact preview with just reference names in their colors
        for ref, (_, color) in st.session_state.marker_settings.items():
            st.markdown(
                f"<div style='text-align: left; color: {color}; font-size: 0.8em;'>{ref}</div>",
                unsafe_allow_html=True,
            )


def reset_marker_settings(refs):
    """Reset marker settings to defaults."""
    default_markers = ["circle", "square", "diamond",
                       "triangle-up", "triangle-down", "star"]
    default_colors = ["#00008B", "#000000",
                      "#FFC0CB", "#008080", "#808080", "#4B0082"]

    st.session_state.marker_settings = {
        ref: (
            default_markers[i % len(default_markers)],
            default_colors[i % len(default_colors)],
        )
        for i, ref in enumerate(refs)
    }
    st.rerun()


def create_cross_section_plot(
    df: pd.DataFrame,
    markers_dict: Optional[Dict[str, Tuple[str, str]]] = None,
    normalization_wavelength: float = 1300,
    depth: float = None,
    wavelength_range: Tuple[float, float] = None,
    absorption_threshold: float = 50,
) -> go.Figure:
    """Create cross section plot with consistent styling."""
    # Get current theme from session state
    current_theme = st.session_state.get("theme", "light")
    theme_colors = DARK_THEME if current_theme == "dark" else LIGHT_THEME
    
    # Update floating element theme with current theme colors
    FLOATING_ELEMENT_THEME.update({
        "font": dict(
            family="Arial, sans-serif",
            size=10,
            color=theme_colors["font_color"]
        ),
        "bgcolor": theme_colors["bgcolor"],
        "bordercolor": theme_colors["bordercolor"],
    })
    
    config = CrossSectionPlotConfig()
    
    # Set wavelength range from session state but extend heatmap
    if wavelength_range:
        config.wavelength_range = wavelength_range
    
    # Get depth from session state if not provided
    if depth is None:
        depth = st.session_state.tissue_params.get(
            "depth", DEFAULT_TISSUE_PARAMS["depth"])

    threshold_norm = absorption_threshold / 100

    # Create figure
    fig = go.Figure()

    # Calculate extended wavelength range for heatmap
    extended_range = config.get_extended_wavelength_range(config.wavelength_range)
    wavelengths = np.linspace(
        extended_range[0], extended_range[1], 300  # Increased resolution
    )
    tissue_data = calculate_tissue_parameters(wavelengths, depth=depth)

    # Normalize at specified wavelength
    norm_idx = np.abs(wavelengths - normalization_wavelength).argmin()
    norm_factor = tissue_data["T"][norm_idx]
    photon_fraction = tissue_data["T"] / norm_factor

    # Calculate y-axis range from data
    min_y = df["Cross_Section"].min() * 0.5  # Add 50% padding below
    max_y = df["Cross_Section"].max() * 2.0  # Add 100% padding above
    y_range = [np.log10(min_y), np.log10(max_y)]

    # Create much larger y-range for heatmap
    heatmap_y_min = min_y * 0.001  # Extend 3 orders of magnitude down
    heatmap_y_max = max_y * 1000   # Extend 3 orders of magnitude up
    y_values = np.logspace(np.log10(heatmap_y_min), np.log10(heatmap_y_max), 500)  # More points for smoother appearance
    Z = np.tile(photon_fraction, (len(y_values), 1))

    # Add heatmap with theme-aware colorbar
    fig.add_trace(
        go.Heatmap(
            x=wavelengths,
            y=y_values,
            z=Z,
            colorscale=config.heatmap_colorscale,
            showscale=True,
            colorbar=get_common_colorbar_config(
                title="Normalized<br>Photon<br>Fraction",
                x=0.98,
                y=0.02,
                len=0.3,
                tickvals=[0.01, threshold_norm, 1.0],
                ticktext=["0.01", f"{absorption_threshold}%", "100%"]
            ),
            zmin=0.01,
            zmax=1.0,
            opacity=config.heatmap_opacity,
            hoverinfo='skip',
            visible=True,
            zorder=0,
            xaxis="x",
            yaxis="y",
        )
    )

    # Add scatter points for each reference with explicit axis ranges
    for ref in df["Reference"].unique():
        ref_data = df[df["Reference"] == ref]
        marker_style, color = markers_dict.get(
            ref, config.default_marker_styles.get(ref, ("circle", "#808080"))
        )

        fig.add_trace(
            go.Scatter(
                x=ref_data["Wavelength"],
                y=ref_data["Cross_Section"],
                mode="markers+text",
                name=ref,
                marker=dict(
                    symbol=marker_style,
                    size=config.marker_size,
                    color=color,
                ),
                text=ref_data["Name"],
                textposition="top center",
                hovertemplate=(
                    "<b>%{text}</b><br>"
                    "Wavelength: %{x} nm<br>"
                    "Cross Section: %{y} GM<br>"
                    "<extra></extra>"
                ),
                zorder=1,  # Put data points in foreground
            )
        )

    # Add laser overlays
    fig = overlay_lasers(fig, plot_type="cross_section")

    # Update layout with theme-aware legend
    base_layout = config.get_layout()
    base_layout.update({
        "paper_bgcolor": "rgba(0,0,0,0)",
        "plot_bgcolor": "rgba(0,0,0,0)",
        "legend": {
            "font": FLOATING_ELEMENT_THEME["font"],
            "bgcolor": FLOATING_ELEMENT_THEME["bgcolor"],
            "bordercolor": FLOATING_ELEMENT_THEME["bordercolor"],
            "borderwidth": FLOATING_ELEMENT_THEME["borderwidth"],
            "xanchor": "right",
            "x": 0.98,
            "y": 0.82,
            "yanchor": "top",
            "orientation": "v",
            "itemwidth": 30,
            "itemsizing": "constant",
            "entrywidth": 150,
            "entrywidthmode": "pixels",
            "tracegroupgap": 5,
        },
        "yaxis": {
            "type": "log",
            "range": y_range,  # Dynamic range based on data
            "title": "Peak 2PA Cross Section (GM)",
            "showgrid": True,
            "gridcolor": "rgba(128, 128, 128, 0.15)",
            "zeroline": False,
            "fixedrange": False,  # Allow y-axis panning
            "scaleanchor": "x",   # Keep aspect ratio
            "scaleratio": 1,      # 1:1 ratio
        },
        "xaxis": {
            "title": "Wavelength (nm)",
            "range": [config.wavelength_range[0], config.wavelength_range[1]],
            "showgrid": True,
            "gridcolor": "rgba(128, 128, 128, 0.15)",
            "zeroline": False,
            "fixedrange": False,  # Allow x-axis panning
        },
        "dragmode": "pan",  # Set default mode to panning
    })
    fig.update_layout(base_layout)

    return fig