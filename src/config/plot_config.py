"""
    --- AUTO-GENERATED DOCSTRING ---
    Table of content is automatically generated by Agent Docstrings v1.3.5

    Classes/Functions:
        - get_theme_colors() (line 48)
        
        - CrossSectionPlotConfig (line 126):
            - get_extended_wavelength_range(current_range: Tuple[float, float]) -> Tuple[float, float] (line 165)
            - get_layout() -> dict (line 174)
        - TissuePlotConfig (line 254):
            - get_layout() -> dict (line 290)


    --- END AUTO-GENERATED DOCSTRING ---
"""
from dataclasses import dataclass, field
from typing import Dict, List, Tuple

import streamlit as st

# Add shared configuration at module level
SHARED_PLOT_CONFIG = {
    "autosize": True,  # Let Plotly handle sizing
    "height": 800,     # Default height
    "width": 800,      # Default width
    "margin": dict(t=50, r=50, b=50, l=50),
    "font": dict(
        family="Arial, sans-serif",
        size=14,
    ),
    "showgrid": False,
    "zeroline": False,
}

# Default theme colors
LIGHT_THEME = {
    "bgcolor": "rgba(255, 255, 255, 0.9)",     # Light background
    "bordercolor": "rgba(128, 128, 128, 0.2)",  # Subtle border for light theme
    "font_color": "#2E2E2E"                     # Dark text for light theme
}

DARK_THEME = {
    "bgcolor": "rgba(32, 32, 32, 0.9)",     # Dark background
    "bordercolor": "rgba(128, 128, 128, 0.3)",  # Subtle border for dark theme
    "font_color": "#FFFFFF"                     # White text for dark theme
}

def get_theme_colors():
    """Get theme-aware colors based on Streamlit theme"""
    return DARK_THEME if st.session_state.get("theme") == "dark" else LIGHT_THEME

# Shared styling configuration
STYLE_CONFIG = {
    # Colors
    "primary_color": "#0f4c81",      # Deep blue
    "secondary_color": "#ff4b4b",    # Coral red
    "accent_color": "#17becf",       # Turquoise
    "text_color": "#666666",         # Gray for descriptions
    "border_color": "rgba(128, 128, 128, 0.2)",

    # Text styles
    "header_style": """
        color: #0f4c81;
        font-size: 24px;
        font-weight: 600;
        margin-bottom: 1rem;
    """,
    "subheader_style": """
        color: #0f4c81;
        font-size: 20px;
        font-weight: 500;
        margin: 1rem 0;
    """,
    "description_style": """
        color: #666666;
        font-size: 16px;
        margin-bottom: 1.5rem;
    """,

    # Component styles
    "expander_style": """
        border: 1px solid rgba(128, 128, 128, 0.2);
        border-radius: 4px;
        padding: 1rem;
        margin: 1rem 0;
    """,
    "plot_style": {
        "bgcolor": "rgba(255, 255, 255, 0)",
        "margin": dict(t=50, r=50, b=50, l=50),
        "font": dict(
            family="Arial, sans-serif",
            size=14,
            color="#2E2E2E"
        )
    }
}

# Initialize with light theme by default
FLOATING_ELEMENT_THEME = {
    "font": dict(
        family="Arial, sans-serif",
        size=12,
        color=STYLE_CONFIG["text_color"]
    ),
    "bgcolor": "rgba(255, 255, 255, 0.95)",
    "bordercolor": STYLE_CONFIG["border_color"],
    "borderwidth": 1,
}



def get_common_colorbar_config(title: str = "Normalized<br>Photon<br>Fraction",
                              x: float = 0.98,
                              y: float = 0.15,
                              len: float = 0.3,
                              tickvals: list = None,
                              ticktext: list = None) -> dict:
    """Get common colorbar configuration to eliminate duplicate code.

    Args:
        title: Colorbar title text
        x: X position of colorbar
        y: Y position of colorbar
        len: Length of colorbar
        tickvals: Custom tick values for colorbar
        ticktext: Custom tick text labels for colorbar

    Returns:
        Dictionary with colorbar configuration
    """
    config = dict(
        title=title,
        tickfont=FLOATING_ELEMENT_THEME["font"],
        len=len,
        x=x,
        y=y,
        xanchor="right",
        yanchor="bottom",
        bgcolor=FLOATING_ELEMENT_THEME["bgcolor"],
        bordercolor=FLOATING_ELEMENT_THEME["bordercolor"],
        borderwidth=FLOATING_ELEMENT_THEME["borderwidth"],
        outlinewidth=0,
    )

    # Add custom tick configuration if provided
    if tickvals is not None:
        config["tickvals"] = tickvals
    if ticktext is not None:
        config["ticktext"] = ticktext

    return config


@dataclass
class CrossSectionPlotConfig:
    """Configuration for two-photon cross-section plots with heatmap background."""
    
    # Plot dimensions and margins
    height: int = SHARED_PLOT_CONFIG["height"]
    width: int = SHARED_PLOT_CONFIG["width"]
    margin: dict = field(default_factory=lambda: SHARED_PLOT_CONFIG["margin"])
    font: dict = field(default_factory=lambda: SHARED_PLOT_CONFIG["font"])

    # Axis configurations
    wavelength_range: Tuple[float, float] = (700, 1600)
    cross_section_range: Tuple[int, int] = (0.5, 2.5)  # log10 scale: ~3 GM to ~300 GM
    heatmap_extension_factor: float = 3.0  # Extend heatmap further beyond visible range

    # Background heatmap settings
    heatmap_colorscale: List[List] = field(
        default_factory=lambda: [
            [0, "rgba(255, 180, 180, 0.5)"],     # Stronger light red
            [0.4, "rgba(255, 220, 220, 0.4)"],   # Medium light red
            [0.5, "rgba(220, 220, 255, 0.4)"],   # Medium light blue
            [1, "rgba(180, 180, 255, 0.5)"],     # Stronger light blue
        ]
    )
    heatmap_opacity: float = 0.6  # Slightly reduced opacity

    # Marker settings
    marker_size: int = 12
    default_marker_styles: Dict[str, Tuple[str, str]] = field(
        default_factory=lambda: {
            "Dana et al. (2016)": ("circle", "#1f77b4"),         # Classic blue
            "Drobizhev et al. (2011)": ("square", "#2c2c2c"),    # Dark gray
            "Janelia, Harris Lab": ("diamond", "#e377c2"),       # Pink
            "Kobat et al. (2009)": ("triangle-up", "#17becf"),   # Turquoise
            "Xu et al. (1996)": ("triangle-down", "#7f7f7f")     # Medium gray
        }
    )

    # Layout settings
    title: str = "Two-Photon Cross Sections"
    # Removed unused variable legend_bgcolor

    def get_extended_wavelength_range(self, current_range: Tuple[float, float]) -> Tuple[float, float]:
        """Calculate extended wavelength range for heatmap"""
        range_width = current_range[1] - current_range[0]
        extension = range_width * (self.heatmap_extension_factor - 1) / 2
        return (
            current_range[0] - extension,
            current_range[1] + extension
        )

    def get_layout(self) -> dict:
        """Return the plotly layout configuration"""
        return {
            "title": dict(
                text=self.title,
                font=dict(size=16)
            ),
            "xaxis": dict(
                title="Wavelength (nm)",
                range=self.wavelength_range,
                showgrid=True,
                gridcolor="rgba(128, 128, 128, 0.15)",
                zeroline=SHARED_PLOT_CONFIG["zeroline"],
                titlefont=self.font,
                tickfont=self.font,
                linecolor="rgba(128, 128, 128, 0.4)",
                constrain="domain",  # Constrain axis to maintain aspect ratio
            ),
            "yaxis": dict(
                title="Peak 2PA Cross Section (GM)",
                type="log",
                range=self.cross_section_range,
                showgrid=True,
                gridcolor="rgba(128, 128, 128, 0.15)",
                zeroline=SHARED_PLOT_CONFIG["zeroline"],
                titlefont=self.font,
                tickfont=self.font,
                linecolor="rgba(128, 128, 128, 0.4)",
                dtick=0.5,
                scaleanchor="x",  # Lock aspect ratio
                scaleratio=1,     # 1:1 ratio
                constrain="domain",  # Constrain axis to maintain aspect ratio
            ),
            "margin": self.margin,
            "autosize": True,
            "showlegend": True,
            "legend": dict(
                title=dict(
                    text="",
                    font=FLOATING_ELEMENT_THEME["font"]
                ),
                font=FLOATING_ELEMENT_THEME["font"],
                bgcolor=FLOATING_ELEMENT_THEME["bgcolor"],
                bordercolor=FLOATING_ELEMENT_THEME["bordercolor"],
                borderwidth=FLOATING_ELEMENT_THEME["borderwidth"],
                xanchor="right",
                x=0.98,
                y=0.82,
                yanchor="top",
                orientation="v",
                itemwidth=30,
                itemsizing="constant",
                entrywidth=150,
                entrywidthmode="pixels",
                tracegroupgap=5,
            ),
            "coloraxis": dict(
                colorbar=get_common_colorbar_config()
            ),
            "paper_bgcolor": "rgba(0,0,0,0)",
            "plot_bgcolor": "rgba(0,0,0,0)",
            "width": self.width,   # Set fixed width
            "height": self.width,  # Set height equal to width
        }


@dataclass
class TissuePlotConfig:
    """Configuration for tissue penetration plots with dual y-axes."""
    
    # Plot dimensions and styling
    height: int = SHARED_PLOT_CONFIG["height"]
    width: int = SHARED_PLOT_CONFIG["width"]
    margin: dict = field(default_factory=lambda: SHARED_PLOT_CONFIG["margin"])
    font: dict = field(default_factory=lambda: SHARED_PLOT_CONFIG["font"])

    # Add wavelength range like CrossSectionPlotConfig
    wavelength_range: Tuple[float, float] = (700, 2400)

    # Line styling
    photon_fraction_line: dict = field(
        default_factory=lambda: dict(color="blue", width=2)
    )
    absorption_line: dict = field(
        default_factory=lambda: dict(
            color="red",
            width=2,
            solid="solid",
            dotted="dot"
        )
    )

    # Shading configuration
    # Removed unused variable absorption_shape

    # Axis configurations
    # Removed unused variables y_axis_range and y2_axis_range

    def get_layout(self) -> dict:
        """Return the plotly layout configuration"""
        return {
            "height": self.height,
            "width": self.width,
            "margin": self.margin,
            "showlegend": False,
            "font": self.font,
        }


