"""
    --- AUTO-GENERATED DOCSTRING ---
    Table of content is automatically generated by Agent Docstrings v1.3.5
    
    Classes/Functions:
        - get_cached_tissue_data(wavelengths: np.ndarray, depth: float, norm_wavelength: float) -> dict (line 31)
        - render_plot_container(plot_type: str, df: Optional[pd.DataFrame] = None) -> None (line 43)
        - render_footer() -> None (line 212)
    --- END AUTO-GENERATED DOCSTRING ---
"""
import logging
from typing import Optional

import numpy as np
import pandas as pd
import streamlit as st

from src.api.google import send_data
from src.config.constants import FLUOROPHORE_CSV
from src.config.tissue_config import DEFAULT_TISSUE_PARAMS, render_math_view
from src.plots.cross_section_plot import (
    create_cross_section_plot,
    get_marker_settings,
    marker_settings_ui,
)
from src.plots.tissue_view import calculate_tissue_parameters, create_tissue_plot

logger = logging.getLogger(__name__)

@st.cache_data(ttl=300)
def get_cached_tissue_data(
    wavelengths: np.ndarray,
    depth: float,
    norm_wavelength: float,
) -> dict:
    """Cache tissue calculations to improve performance."""
    return calculate_tissue_parameters(
        wavelengths=wavelengths,
        depth=depth,
        normalization_wavelength=norm_wavelength,
    )

def render_plot_container(plot_type: str, df: Optional[pd.DataFrame] = None) -> None:
    """Render plot containers with consistent error handling."""
    try:
        if "tissue_params" not in st.session_state:
            st.session_state.tissue_params = DEFAULT_TISSUE_PARAMS.copy()

        global_params = st.session_state.global_params
        tissue_params = st.session_state.tissue_params
        depth = tissue_params.get("depth", DEFAULT_TISSUE_PARAMS["depth"])
        norm_wavelength = global_params["normalization_wavelength"]
        wavelength_range = global_params["wavelength_range"]
        absorption_threshold = global_params["absorption_threshold"]

        PLOT_SIZE = 800

        if plot_type == "cross_sections":
            plot_container = st.container(border=True)
            with plot_container:
                if df is not None and not df.empty:
                    if "fluorophore_visibility" not in st.session_state:
                        st.session_state.fluorophore_visibility = {
                            row["Name"]: True for _, row in df.iterrows()
                        }

                    df_with_visibility = df.copy()
                    df_with_visibility["Visible"] = df_with_visibility["Name"].map(
                        st.session_state.fluorophore_visibility
                    ).fillna(True)

                    visible_df = df_with_visibility[df_with_visibility["Visible"]]

                    markers_dict = get_marker_settings()
                    fig = create_cross_section_plot(
                        visible_df[["Name", "Wavelength", "Cross_Section", "Reference"]],
                        markers_dict=markers_dict,
                        normalization_wavelength=norm_wavelength,
                        depth=depth,
                        wavelength_range=wavelength_range,
                        absorption_threshold=absorption_threshold,
                    )

                    st.plotly_chart(
                        fig,
                        use_container_width=True,
                        theme="streamlit",
                        config={"displayModeBar": True, "responsive": True},
                    )
                else:
                    st.info("No data to display - try searching for fluorophores.")

                with st.popover("Marker Settings"):
                    marker_settings_ui()

            st.markdown("### Fluorophore Data")
            if "fluorophore_df" in st.session_state:
                show_all = st.toggle(
                    "Show All Fluorophores",
                    value=True,
                    key="show_all_fluorophores",
                )

                df_for_editor = st.session_state.fluorophore_df.copy()

                if show_all:
                    st.session_state.fluorophore_visibility = {
                        name: True for name in df_for_editor["Name"]
                    }
                else:
                    st.session_state.fluorophore_visibility = {
                        name: False for name in df_for_editor["Name"]
                    }

                df_for_editor["Visible"] = df_for_editor["Name"].map(
                    st.session_state.fluorophore_visibility
                ).fillna(True)

                edited_df = st.data_editor(
                    df_for_editor,
                    num_rows="dynamic",
                    column_config={
                        "Visible": st.column_config.CheckboxColumn(
                            "Show",
                            help="Toggle fluorophore visibility in plot",
                            default=True,
                        ),
                        "Name": st.column_config.TextColumn(
                            "Fluorophore",
                            help="Fluorophore name",
                        ),
                        "Wavelength": st.column_config.NumberColumn(
                            "2P Î» (nm)",
                            help="Two-photon excitation wavelength",
                            format="%d",
                        ),
                        "Cross_Section": st.column_config.NumberColumn(
                            "Cross Section (GM)",
                            help="Two-photon cross section in Goeppert-Mayer units",
                            format="%.2f",
                        ),
                        "Reference": st.column_config.TextColumn(
                            "Reference",
                            help="Data source (Zipfel Lab or FPbase)",
                        ),
                    },
                    column_order=["Visible", "Name", "Wavelength", "Cross_Section", "Reference"],
                    use_container_width=True,
                    hide_index=True,
                    key="overview_editor",
                )

                st.session_state.fluorophore_visibility = {
                    row["Name"]: row["Visible"] for _, row in edited_df.iterrows()
                }

                if st.button("Save Changes", icon="ðŸ’¾", type="primary", key="overview_save"):
                    try:
                        save_df = edited_df.drop(columns=["Visible"])
                        st.session_state.fluorophore_df = save_df
                        data = save_df.to_dict("records")
                        send_data("fluorophores", data)
                        save_df.to_csv(FLUOROPHORE_CSV, index=False)
                        st.success("Changes saved!")
                        st.rerun()
                    except Exception as e:  # pylint: disable=broad-except
                        st.error(f"Failed to save changes: {str(e)}")

                csv = edited_df.drop(columns=["Visible"]).to_csv(index=False)
                st.download_button(
                    label="Download Table",
                    icon="ðŸ“¥",
                    data=csv,
                    file_name="fluorophore_table.csv",
                    mime="text/csv",
                    key="overview_download",
                )
            else:
                st.info(
                    "No data in fluorophore table yet. Add fluorophores from the Fluorophore Library tab."
                )

        elif plot_type == "tissue_penetration":
            plot_container = st.container(border=True)
            with plot_container:
                wavelengths = np.linspace(wavelength_range[0], wavelength_range[1], 1000)
                tissue_data = get_cached_tissue_data(
                    wavelengths=wavelengths,
                    depth=depth,
                    norm_wavelength=norm_wavelength,
                )

                fig = create_tissue_plot(
                    wavelengths=wavelengths,
                    tissue_data=tissue_data,
                    normalization_wavelength=norm_wavelength,
                    absorption_threshold=absorption_threshold,
                    wavelength_range=wavelength_range,
                    depth=depth,
                )
                fig.update_layout(width=PLOT_SIZE, height=PLOT_SIZE, autosize=False)
                st.plotly_chart(fig, use_container_width=True, theme="streamlit")
            render_math_view()

    except (ValueError, KeyError) as e:
        logger.error("Error rendering %s plot: %s", plot_type, str(e))
        st.error(f"Error creating {plot_type} plot: {str(e)}")
    except Exception as e:  # pylint: disable=broad-except
        logger.error("Unexpected error rendering %s plot: %s", plot_type, str(e))
        st.error("An unexpected error occurred. Please check the logs.")

def render_footer() -> None:
    """Render a simple application footer."""
    st.markdown("---")
    st.markdown(
        """
        <div style='text-align: center; color: gray; font-size: 0.8em; padding: 20px 0;'>
            Developed by Aaron Woods<br>
            Data from <a href="https://www.fpbase.org">FPbase</a>
        </div>
        """,
        unsafe_allow_html=True,
    )
