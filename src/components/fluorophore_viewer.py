"""
    --- AUTO-GENERATED DOCSTRING ---
    Table of content is automatically generated by Agent Docstrings v1.3.5
    
    Classes/Functions:
        - fetch_image_content(url: str) (line 23)
        - get_reference_image_url(fluorophore_name: str) -> str (line 33)
        - calculate_fluorophore_stats(df: pd.DataFrame, fluorophore_name: str) -> Dict[str, float] (line 51)
        - format_stats(stats: Dict[str, float]) -> str (line 85)
        - render_fluorophore_viewer(cross_sections: Dict[str, pd.DataFrame], key_prefix: str = '') -> None (line 97)
    --- END AUTO-GENERATED DOCSTRING ---
"""
import streamlit as st
import logging # Added
from typing import Dict
import pandas as pd
import requests
from ..plots.zipfel_cross_sections import plot_cross_section

logger = logging.getLogger(__name__) # Added

@st.cache_data # Added caching
def fetch_image_content(url: str):
    """Fetch image content from URL with caching and error handling."""
    try:
        response = requests.get(url, timeout=10) # Added timeout
        response.raise_for_status() # Raise HTTPError for bad responses (4xx or 5xx)
        return response.content
    except requests.exceptions.RequestException as e:
        logger.warning(f"Failed to fetch image {url}: {e}")
    return None

def get_reference_image_url(fluorophore_name: str) -> str:
    """
    Get the reference image URL for a given fluorophore.
    Handles common spelling variations.
    """
    base_url = "http://www.drbio.cornell.edu/images/CrossSectionJPGs"
    
    # Dictionary of filename corrections
    filename_corrections = {
        "Fluoresecein": "Fluorescein",
        # Add more corrections here if needed
    }
    
    # Use corrected filename if it exists, otherwise use original
    corrected_name = filename_corrections.get(fluorophore_name, fluorophore_name)
    
    return f"{base_url}/{corrected_name}.jpg"

def calculate_fluorophore_stats(df: pd.DataFrame, fluorophore_name: str) -> Dict[str, float]:
    """Calculate statistics for the fluorophore data."""
    stats = {}
    
    if fluorophore_name == "IntrinsicFluorophores":
        # Calculate stats for each fluorophore
        for col in ["riboflavin", "folic_acid", "cholecalciferol", "retinol"]:
            peak_idx = df[col].idxmax()
            stats[f"{col}_peak_wavelength"] = df.loc[peak_idx, "wavelength"]
            stats[f"{col}_peak_cross_section"] = df.loc[peak_idx, col]
            stats[f"{col}_mean_cross_section"] = df[col].mean()
            
    elif fluorophore_name == "NADH-ProteinBound":
        # Calculate stats for each form
        for col in ["gm_mean", "gm_mdh", "gm_ad"]:
            peak_idx = df[col].idxmax()
            stats[f"{col}_peak_wavelength"] = df.loc[peak_idx, "wavelength"]
            stats[f"{col}_peak_cross_section"] = df.loc[peak_idx, col]
            stats[f"{col}_mean_cross_section"] = df[col].mean()
        if "sd" in df.columns:
            stats["mean_std_dev"] = df["sd"].mean()
            
    else:
        # Standard statistics for single-trace fluorophores
        cross_section_col = "cross_section" if "cross_section" in df.columns else df.columns[1]
        peak_idx = df[cross_section_col].idxmax()
        stats["peak_wavelength"] = df.loc[peak_idx, "wavelength"]
        stats["peak_cross_section"] = df.loc[peak_idx, cross_section_col]
        stats["mean_cross_section"] = df[cross_section_col].mean()
        if "std_dev" in df.columns:
            stats["mean_std_dev"] = df["std_dev"].mean()
    
    return stats

def format_stats(stats: Dict[str, float]) -> str:
    """Format statistics for display."""
    formatted = []
    for key, value in stats.items():
        if "wavelength" in key:
            formatted.append(f"**{key.replace('_', ' ').title()}:** {value:.0f} nm")
        elif "cross_section" in key:
            formatted.append(f"**{key.replace('_', ' ').title()}:** {value:.2e} GM")
        elif "std_dev" in key:
            formatted.append(f"**{key.replace('_', ' ').title()}:** {value:.2e}")
    return "\n\n".join(formatted)

def render_fluorophore_viewer(cross_sections: Dict[str, pd.DataFrame], key_prefix: str = "") -> None:
    """Render the fluorophore viewer component."""
    if not cross_sections:
        st.warning("No cross-section data available.")
        return

    # Create a dropdown for fluorophore selection
    fluorophore_names = sorted(cross_sections.keys())
    selected_fluorophore = st.selectbox(
        "Select Fluorophore",
        options=fluorophore_names,
        help="Choose a fluorophore to view its two-photon cross section data",
        key=f"{key_prefix}_fluorophore_selector"
    )

    # Create columns for plot and reference/stats
    col1, col2 = st.columns([2, 1])

    with col1:
        with st.expander("üìà Cross Section Plot", expanded=True, icon="üìà"):
            try:
                fig = plot_cross_section(
                    cross_sections=cross_sections,
                    selected_fluorophore=selected_fluorophore,
                    height=500,
                    width=700,
                    show_error_bars=True
                )
                st.plotly_chart(fig, use_container_width=True, key=f"{key_prefix}_plot")
            except Exception as e:
                st.error(f"Error plotting data for {selected_fluorophore}: {str(e)}")

    with col2:
        # Statistics Section
        with st.expander("üìä Statistics", expanded=True, icon="üìä"):
            df = cross_sections[selected_fluorophore]
            stats = calculate_fluorophore_stats(df, selected_fluorophore)
            st.markdown(format_stats(stats))
        
        # Reference Image
        with st.expander("üîç Reference Plot", expanded=True, icon="üîç"):
            try:
                image_url = get_reference_image_url(selected_fluorophore)
                image_content = fetch_image_content(image_url) # Use cached function
                if image_content:
                    st.image(
                        image_content,
                        caption=f"Reference plot for {selected_fluorophore}",
                        use_container_width=True
                    )
                else:
                    st.info(f"Reference image not found or failed to load for {selected_fluorophore}.") # Improved message
            except Exception as e: # Catch specific exceptions if possible
                logger.error(f"Error displaying reference image for {selected_fluorophore}: {e}")
                st.warning(f"Could not display reference image.")

    # Data Table Section
    with st.expander("üìã Raw Data", expanded=False, icon="üìã"):
        df = cross_sections[selected_fluorophore]
        st.dataframe(
            df,
            use_container_width=True,
            hide_index=True,
            key=f"{key_prefix}_dataframe"
        )
        
        # Download button for raw data
        csv = df.to_csv(index=False)
        st.download_button(
            label="üì• Download Raw Data",
            data=csv,
            file_name=f"{selected_fluorophore}_cross_section.csv",
            mime="text/csv",
            key=f"{key_prefix}_download"
        )
