"""
    --- AUTO-GENERATED DOCSTRING ---
    Table of content is automatically generated by Agent Docstrings v1.3.5

    Classes/Functions:
        - create_coefficient_plot(wavelengths: np.ndarray, y_values: np.ndarray, title: str, line_color: str, marker_color: str) -> go.Figure (line 52)
        - add_formula_spacing() (line 96)
        - create_parameter_relationship_plot(param_values: np.ndarray, coefficients: np.ndarray, param_name: str, current_value: float, line_color: str) -> go.Figure (line 102)
        - render_scattering_section(col, params) -> tuple[float, float, float] (line 152)
        - render_absorption_section(col, params) -> float (line 302)
        - render_math_view() (line 384)
    --- END AUTO-GENERATED DOCSTRING ---

Configuration for tissue penetration modeling.
"""
import numpy as np
import plotly.graph_objects as go
import streamlit as st


# Changed from relative to absolute import
from src.utils.data_loader import load_water_absorption_data

# Formula display configuration
MAIN_FORMULA_SIZE = r"\Large"  # Size for the main formula
FORMULA_SIZE = r"\large"      # Size for other formulas
FORMULA_SPACING = 2          # Number of blank lines after formulas

# Plot configuration
PLOT_CONFIG = {
    "height": 300,
    "small_height": 250,  # Increased height for parameter plots
    "margin": dict(l=20, r=20, t=40, b=20),  # Adjusted margins
    "small_margin": dict(l=20, r=20, t=40, b=20),
    "hovermode": 'x unified',
    "wavelength_range": [800, 2400],
    "reference_wavelength": 1300,
    "showlegend": False,  # Hide legend by default
    "aspect_ratio": 1.2,  # For more square-like appearance
}

# Default tissue parameters to match the paper
DEFAULT_TISSUE_PARAMS = {
    "depth": 1.0,  # 1mm depth as shown in image
    "water_content": 0.75,  # 75% as specified
    "g": 0.9,  # Matches paper
    "a": 1.1,  # 1.1 mm^-1 as specified
    "b": 1.37,  # Matches paper
    "absorption_threshold": 50,  # Percentage threshold for shading
}


def create_coefficient_plot(
    wavelengths: np.ndarray,
    y_values: np.ndarray,
    title: str,
    line_color: str,
    marker_color: str,
) -> go.Figure:
    """Create a coefficient plot with consistent styling."""
    fig = go.Figure()

    # Add main line
    fig.add_trace(go.Scatter(
        x=wavelengths,
        y=y_values,
        mode='lines',
        showlegend=False,
        line=dict(color=line_color)
    ))

    # Add reference point
    ref_idx = np.abs(
        wavelengths - PLOT_CONFIG["reference_wavelength"]).argmin()
    fig.add_trace(go.Scatter(
        x=[PLOT_CONFIG["reference_wavelength"]],
        y=[y_values[ref_idx]],
        mode='markers',
        showlegend=False,
        marker=dict(size=10, color=marker_color)
    ))

    # Update layout
    fig.update_layout(
        title=title,
        xaxis_title="Wavelength (nm)",
        yaxis_title=f"{title} (mm⁻¹)",
        height=PLOT_CONFIG["height"],
        margin=PLOT_CONFIG["margin"],
        hovermode=PLOT_CONFIG["hovermode"],
        showlegend=False
    )

    return fig


def add_formula_spacing():
    """Add consistent spacing after formulas."""
    for _ in range(FORMULA_SPACING):
        st.write("")


def create_parameter_relationship_plot(
    param_values: np.ndarray,
    coefficients: np.ndarray,
    param_name: str,
    current_value: float,
    line_color: str,
) -> go.Figure:
    """Create a plot showing direct relationship between parameter and coefficient."""
    fig = go.Figure()

    # Add main line
    fig.add_trace(go.Scatter(
        x=param_values,
        y=coefficients,
        mode='lines',
        showlegend=False,  # Hide legend
        line=dict(color=line_color)
    ))

    # Add point for current value
    fig.add_trace(go.Scatter(
        x=[current_value],
        y=[np.interp(current_value, param_values, coefficients)],
        mode='markers',
        showlegend=False,  # Hide legend
        marker=dict(size=10, color='black')
    ))

    # Update layout for more square-like appearance
    fig.update_layout(
        title=dict(
            text=f"Coefficient vs {param_name}",
            y=0.95,  # Adjust title position
            x=0.5,
            xanchor='center',
            yanchor='top'
        ),
        xaxis_title=param_name,
        yaxis_title="Coefficient (mm⁻¹)",
        height=PLOT_CONFIG["small_height"],
        margin=PLOT_CONFIG["small_margin"],
        hovermode='x unified',
        showlegend=False,
        # Make plot more square-like
        width=PLOT_CONFIG["small_height"] * PLOT_CONFIG["aspect_ratio"]
    )

    return fig


def render_parameter_control_with_popover(
    label: str,
    param_type: str,
    value: float,
    min_value: float,
    max_value: float,
    step: float,
    help_text: str,
    popover_title: str,
    popover_help: str,
    popover_values: np.ndarray,
    popover_coefficients: np.ndarray,
    popover_param_name: str,
    popover_current_value: float,
    popover_line_color: str,
    popover_formula: str,
    popover_markdown: str,
    is_slider: bool = True
) -> float:
    """Render a parameter control (slider or number input) with a popover for impact visualization."""
    if is_slider:
        param = st.slider(
            label,
            min_value,
            max_value,
            value,
            step,
            help=help_text,
        )
    else:
        param = st.number_input(
            label,
            min_value=min_value,
            max_value=max_value,
            value=value,
            step=step,
            help=help_text,
        )
    with st.popover(popover_title, help=popover_help):
        fig = create_parameter_relationship_plot(
            param_values=popover_values,
            coefficients=popover_coefficients,
            param_name=popover_param_name,
            current_value=popover_current_value,
            line_color=popover_line_color
        )
        st.plotly_chart(fig, use_container_width=True)
        st.markdown("**Impact of {}:**".format(popover_param_name))
        st.latex(popover_formula)
        st.markdown(popover_markdown)
    return param


def render_scattering_section(col, params) -> tuple[float, float, float]:
    """
    Render the scattering properties section.

    Args:
        col: Streamlit column object
        params: Dictionary of tissue parameters

    Returns:
        tuple[float, float, float]: Updated (g, b, a) parameters
    """

    # Create two columns for plot and controls
    plot_col, controls_col = col.columns([2, 1])

    with plot_col:
        # Main scattering plot
        wavelengths = np.linspace(*PLOT_CONFIG["wavelength_range"], 1000)
        mus_prime = params['a'] * (wavelengths / 500) ** (-params['b'])
        mus = mus_prime / (1 - params['g'])

        fig = create_coefficient_plot(
            wavelengths=wavelengths,
            y_values=mus,
            title="Scattering Coefficient",
            line_color='blue',
            marker_color='red'
        )
        st.plotly_chart(fig, use_container_width=True)

        # Scattering formula below the plot
        st.markdown("#### Scattering Formula")
        scattering_formula = (
            f"{FORMULA_SIZE} \\mu_s(\\lambda) &= \\frac{{a}}{{1-g}} \\cdot "
            r"\left(\frac{\lambda}{500}\right)^{-b} \\" +
            "\n"  # Add line break
            f"&= \\frac{{\\color{{red}}{{{params['a']:.2f}}}}}"
            f"{{1-\\color{{red}}{{{params['g']:.2f}}}}} \\cdot "
            r"\left(\frac{\lambda}{500}\right)^{" +
            f"\\color{{red}}{{-{params['b']:.2f}}}" + "}"
        )
        st.latex("\\begin{align*}" + scattering_formula + "\\end{align*}")

    with controls_col:
        st.markdown("### Parameter Controls")

        # Column 1: Anisotropy
        g = render_parameter_control_with_popover(
            label="Anisotropy (g)",
            param_type="slider",
            value=params["g"],
            min_value=0.0,
            max_value=1.0,
            step=0.05,
            help_text="Controls directional scattering: g=0 (isotropic) to g=1 (forward only)",
            popover_title="📊 Anisotropy Impact",
            popover_help="Click to see how anisotropy affects scattering",
            popover_values=np.linspace(0.1, 0.99, 100),
            popover_coefficients=params['a'] /
            (1 - np.linspace(0.1, 0.99, 100)),
            popover_param_name="Anisotropy",
            popover_current_value=params["g"],
            popover_line_color='blue',
            popover_formula=r"\begin{align*}\mu_s &= \frac{\mu_s'}{1-g} \\ &= \frac{a}{1-\color{red}{" +
            f"{params['g']:.2f}" + "}}\end{align*}",
            popover_markdown="""
                - Higher values → more forward scattering
                - Lower values → more uniform scattering
                - Brain tissue typically ≈ 0.9

                *g represents the average cosine of the scattering angle*
            """,
            is_slider=True
        )

        # Column 2: Scattering power (b)
        b = render_parameter_control_with_popover(
            label="Scattering Power (b)",
            param_type="number_input",
            value=params["b"],
            min_value=0.5,
            max_value=2.0,
            step=0.05,
            help_text="Wavelength dependence (≈1.37 for brain tissue)",
            popover_title="📈 Wavelength Dependence Impact",
            popover_help="Click to see how scattering power affects wavelength dependence",
            popover_values=np.linspace(0.5, 2.0, 100),
            popover_coefficients=params['a'] * (PLOT_CONFIG["reference_wavelength"] /
                                                500) ** (-np.linspace(0.5, 2.0, 100)) / (1 - params['g']),
            popover_param_name="Scattering Power (b)",
            popover_current_value=params["b"],
            popover_line_color='blue',
            popover_formula=r"\begin{align*}\mu_s' &= a \cdot \left(\frac{\lambda}{500}\right)^{-b} \\ &= a \cdot \left(\frac{\lambda}{500}\right)^{-\color{red}{" +
            f"{params['b']:.2f}" + "}}\end{align*}",
            popover_markdown="""
                - Controls wavelength dependence
                - Higher b → stronger λ dependence
                - Brain tissue b ≈ 1.37
            """,
            is_slider=False
        )

        # Column 3: Scattering scale (a)
        a = render_parameter_control_with_popover(
            label="Scattering Scale (a)",
            param_type="number_input",
            value=params["a"],
            min_value=0.5,
            max_value=2.0,
            step=0.1,
            help_text="Scattering amplitude [mm⁻¹]",
            popover_title="📉 Scattering Amplitude Impact",
            popover_help="Click to see how scattering scale affects overall scattering",
            popover_values=np.linspace(0.5, 2.0, 100),
            popover_coefficients=np.linspace(0.5, 2.0, 100) *
            (PLOT_CONFIG["reference_wavelength"] /
             500) ** (-params['b']) / (1 - params['g']),
            popover_param_name="Scattering Scale (a)",
            popover_current_value=params["a"],
            popover_line_color='blue',
            popover_formula=r"\begin{align*}\mu_s &= a \cdot \text{(wavelength term)} \\ &= \color{red}{" +
            f"{params['a']:.2f}" +
            "}\text{ mm}^{-1} \cdot \text{(wavelength term)}\end{align*}",
            popover_markdown="""
                - Controls overall scattering strength
                - Higher a → more scattering
                - Brain tissue a ≈ 1.1 mm⁻¹
            """,
            is_slider=False
        )

    return g, b, a


def render_absorption_section(col, params) -> float:
    """
    Render the absorption properties section.

    Args:
        col: Streamlit column object
        params: Dictionary of tissue parameters

    Returns:
        float: Updated water_content parameter
    """

    # Create two columns for plot and controls
    plot_col, controls_col = col.columns([2, 1])

    with plot_col:
        # Main absorption plot
        water_data = load_water_absorption_data()
        wavelengths = np.linspace(*PLOT_CONFIG["wavelength_range"], 1000)
        mua = np.interp(
            wavelengths, water_data["wavelength"], water_data["absorption"])
        mua = mua * params['water_content'] / 10

        fig = create_coefficient_plot(
            wavelengths=wavelengths,
            y_values=mua,
            title="Absorption Coefficient",
            line_color='red',
            marker_color='blue'
        )
        st.plotly_chart(fig, use_container_width=True)

        # Absorption formula below the plot
        st.markdown("#### Absorption Formula")
        absorption_formula = (
            f"{FORMULA_SIZE} \\mu_a(\\lambda) &= \\mu_a^{{\\lambda}} \\cdot w \\\\" + "\n"
            f"                                &= \\mu_a^{{\\lambda}} \\cdot \\color{{red}}{{{params['water_content']:.2f}}}"
        )
        st.latex("\\begin{align*}" + absorption_formula + "\\end{align*}")

    with controls_col:
        st.markdown("### Parameter Controls")
        # Water content is now managed in the dashboard; just display the value
        st.markdown(f"**Water Content:** {params['water_content']:.2f}")


def render_math_view():
    """Render the tissue penetration controls with improved layout."""
    # Initialize tissue parameters in session state if not present
    st.session_state.setdefault("tissue_params", DEFAULT_TISSUE_PARAMS.copy())
    params = st.session_state.tissue_params
    a = params["a"]
    b = params["b"]
    g = params["g"]
    water_content = params["water_content"]

    # Get global parameters from app.py session state
    wavelength_range = st.session_state.global_params.get(
        "wavelength_range", (800, 2400))
    ref_wavelength = st.session_state.global_params.get(
        "normalization_wavelength", 1300)

    # Update plot config with global settings
    PLOT_CONFIG["wavelength_range"] = wavelength_range
    PLOT_CONFIG["reference_wavelength"] = ref_wavelength

    # Create main container for the math view
    main_container = st.container()

    with main_container:
        depth = params.get("depth", 1.0)
        # Place everything inside the Mathematical Model expander for a unified, beautiful layout
        DIALOG_COLOR = "#6c63ff"  # Color for depth, matching dashboard dialog button

        # Centralized Parameter Controls section at the top, outside expander
        st.subheader("Parameter Controls")
        param_col1, param_col2, param_col3, param_col4 = st.columns(4)
        with param_col1:
            g = render_parameter_control_with_popover(
                label="Anisotropy (g)",
                param_type="slider",
                value=params["g"],
                min_value=0.0,
                max_value=1.0,
                step=0.05,
                help_text="Controls directional scattering: g=0 (isotropic) to g=1 (forward only)",
                popover_title="📊 Anisotropy Impact",
                popover_help="Click to see how anisotropy affects scattering",
                popover_values=np.linspace(0.1, 0.99, 100),
                popover_coefficients=params['a'] /
                (1 - np.linspace(0.1, 0.99, 100)),
                popover_param_name="Anisotropy",
                popover_current_value=params["g"],
                popover_line_color='blue',
                popover_formula=r"\begin{align*}\mu_s &= \frac{\mu_s'}{1-g} \\ &= \frac{a}{1-\color{red}{" +
                f"{params['g']:.2f}" + "}}\end{align*}",
                popover_markdown="""
                    - Higher values → more forward scattering
                    - Lower values → more uniform scattering
                    - Brain tissue typically ≈ 0.9

                    *g represents the average cosine of the scattering angle*
                """,
                is_slider=True
            )

        with param_col2:
            b = render_parameter_control_with_popover(
                label="Scattering Power (b)",
                param_type="number_input",
                value=params["b"],
                min_value=0.5,
                max_value=2.0,
                step=0.05,
                help_text="Wavelength dependence (≈1.37 for brain tissue)",
                popover_title="📈 Wavelength Dependence Impact",
                popover_help="Click to see how scattering power affects wavelength dependence",
                popover_values=np.linspace(0.5, 2.0, 100),
                popover_coefficients=params['a'] * (ref_wavelength /
                                                    500) ** (-np.linspace(0.5, 2.0, 100)) / (1 - params['g']),
                popover_param_name="Scattering Power (b)",
                popover_current_value=params["b"],
                popover_line_color='blue',
                popover_formula=r"\begin{align*}\mu_s' &= a \cdot \left(\frac{\lambda}{500}\right)^{-b} \\ &= a \cdot \left(\frac{\lambda}{500}\right)^{-\color{red}{" +
                f"{params['b']:.2f}" + "}}\end{align*}",
                popover_markdown="""
                    - Controls wavelength dependence
                    - Higher b → stronger λ dependence
                    - Brain tissue b ≈ 1.37
                """,
                is_slider=False
            )

        with param_col3:
            a = render_parameter_control_with_popover(
                label="Scattering Scale (a)",
                param_type="number_input",
                value=params["a"],
                min_value=0.5,
                max_value=2.0,
                step=0.1,
                help_text="Scattering amplitude [mm⁻¹]",
                popover_title="📉 Scattering Amplitude Impact",
                popover_help="Click to see how scattering scale affects overall scattering",
                popover_values=np.linspace(0.5, 2.0, 100),
                popover_coefficients=np.linspace(0.5, 2.0, 100) *
                (ref_wavelength /
                 500) ** (-params['b']) / (1 - params['g']),
                popover_param_name="Scattering Scale (a)",
                popover_current_value=params["a"],
                popover_line_color='blue',
                popover_formula=r"\begin{align*}\mu_s &= a \cdot \text{(wavelength term)} \\ &= \color{red}{" +
                f"{params['a']:.2f}" +
                "}\text{ mm}^{-1} \cdot \text{(wavelength term)}\end{align*}",
                popover_markdown="""
                    - Controls overall scattering strength
                    - Higher a → more scattering
                    - Brain tissue a ≈ 1.1 mm⁻¹
                """,
                is_slider=False
            )

        with param_col4:
            st.markdown(
                f"**Water Content:** {water_content:.2f}")
            with st.popover("💧 Water Content Impact", help="Click to see how water content affects absorption"):
                w_values = np.linspace(0, 1, 100)
                water_data = load_water_absorption_data()
                base_absorption = np.interp(
                    ref_wavelength, water_data["wavelength"], water_data["absorption"]) / 10
                mua_w = base_absorption * w_values
                w_fig = create_parameter_relationship_plot(
                    w_values, mua_w, "Water Content", water_content, 'red')
                st.plotly_chart(w_fig, use_container_width=True)
                st.markdown("**Impact of Water Content:**")
                st.latex(r"\begin{align*}\mu_a &= \mu_a^{\lambda} \cdot w \\ &= \mu_a^{\lambda} \cdot \color{red}{" +
                         f"{water_content:.2f}" + "}\end{align*}")
                st.markdown(
                    "- Controls absorption strength\n- Linear relationship with absorption\n- Brain tissue ≈ 75% water\n- Major peaks at 1450nm and 1950nm")

        with st.expander("📐 Mathematical Model", expanded=True):

            # Columns for scattering and absorption
            scattering_col, absorption_col = st.columns(2)

            # Section 1: Prominent explanation of Scattering Coefficient
            with scattering_col:
                st.subheader("Scattering Coefficient (μₛ)")
                st.markdown(r"""
                    The scattering coefficient describes how light is scattered in tissue. 
                    It depends on wavelength (λ), anisotropy (g), scattering scale (a), and scattering power (b).
                    
                    **Formula:**
                """)
                scattering_formula = (
                    f"{FORMULA_SIZE} \\mu_s(\\lambda) &= \\frac{{a}}{{1-g}} \\cdot "
                    r"\left(\frac{\lambda}{500}\right)^{-b} \\" +
                    "\n"  # Add line break
                    f"&= \\frac{{\\color{{red}}{{{a:.2f}}}}}"
                    f"{{1-\\color{{red}}{{{g:.2f}}}}} \\cdot "
                    r"\left(\frac{\lambda}{500}\right)^{" +
                    f"\\color{{red}}{{-{b:.2f}}}" + "}"
                )
                st.latex("\\begin{align*}" +
                         scattering_formula + "\\end{align*}")
                # Recalculate with updated values
                mus_scattering = a * (ref_wavelength / 500) ** (-b) / (1 - g)
                st.markdown(
                    f"At normalized wavelength {ref_wavelength} nm: μₛ = {mus_scattering:.3f} mm⁻¹")
                add_formula_spacing()

            # Section 2: Prominent explanation of Absorption Coefficient
            with absorption_col:
                st.subheader("Absorption Coefficient (μₐ)")
                st.markdown(r"""
                    The absorption coefficient describes how light is absorbed in tissue, 
                    primarily by water content (w). Data is interpolated from water absorption tables.
                    
                    **Formula:**
                """)
                absorption_formula = (
                    f"{FORMULA_SIZE} \\mu_a(\\lambda) &= \\mu_a^{{\\lambda}} \\cdot w \\\\" + "\n"
                    f"                                &= \\mu_a^{{\\lambda}} \\cdot \\color{{red}}{{{water_content:.2f}}}"
                )
                st.latex("\\begin{align*}" +
                         absorption_formula + "\\end{align*}")

                water_data = load_water_absorption_data()
                mua = np.interp(
                    ref_wavelength, water_data["wavelength"], water_data["absorption"]) * water_content / 10
                st.markdown(
                    f"At normalized wavelength {ref_wavelength} nm: μₐ = {mua:.3f} mm⁻¹")
                add_formula_spacing()

            # Section 3: Transmission explanation (full width)
            st.subheader("Transmission (T)")
            st.markdown(r"""
                Transmission combines scattering and absorption to model light penetration at depth z.
            """)
            depth_str = '{:.1f}'.format(depth)
            main_formula_with_depth = (
                MAIN_FORMULA_SIZE +
                " T(\\lambda, z) &= e^{{-(\\color{#1f77b4}{{\\mu_s}}(\\lambda) + \\color{#d62728}{{\\mu_a}}(\\lambda))z}} \\" + "\n"
                "&= e^{{-(\\color{#1f77b4}{{\\mu_s}}(\\lambda) + \\color{#d62728}{{\\mu_a}}(\\lambda)) \\cdot \\color{" +
                DIALOG_COLOR + "}{" + depth_str + "}}} \\" + "\n"
                "&= e^{-\\mu_{\\text{total}}(\\lambda) \\cdot z}"
            )
            st.latex("\\begin{align*}" +
                     main_formula_with_depth + "\\end{align*}")

            # Integrated variable descriptions with color explanations
            st.markdown(r"""
                where:
                - T(λ,z) is the transmission at wavelength λ and depth z
                - $ \color{#1f77b4}{\mu_s}(\lambda) $ is the scattering coefficient
                - $ \color{#d62728}{\mu_a}(\lambda) $ is the absorption coefficient
                - μ_total = μₛ + μₐ is the total attenuation coefficient
                - The $ \color{%s}{z} $ depth value is set in the dashboard dialog
            """ % DIALOG_COLOR)
    # Update session state
    try:
        st.session_state.tissue_params.update({
            "water_content": water_content,  # No change, as it's managed elsewhere
            "g": g,
            "a": a,
            "b": b,
            "depth": depth,
        })
    except (ValueError, TypeError, AttributeError) as e:
        st.error(f"Error updating parameters: {str(e)}")
